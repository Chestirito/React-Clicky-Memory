{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Header.js","components/Introduction.js","components/Card.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Col","_ref","size","children","react_default","a","createElement","className","split","map","join","Container","fluid","concat","Row","Header","props","onClick","reloadPage","message","color","text","score","current","top","Introduction","style","backgroundImage","Card","alt","src","handleOnClick","GameContainer","state","imgs","componentDidMount","_this","setupCards","index","findIndex","element","isClick","resetGame","setState","shuffleCards","imgSrc","randomizeArray","objArr","push","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","window","location","reload","_this2","this","Container_Container","src_components_Header","src_components_Introduction","Row_Row","Col_Col","src_components_Card","key","Component","App","components_GameContainer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dd65564.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Col = ({ size, children }) => (\n  <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\nexport const Container = ({ fluid, children }) => (\n  <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\nexport const Row = ({ fluid, children }) => (\n  <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nconst Header = props => (\r\n  <nav className=\"header navbar sticky-top\">\r\n    <h4 className=\"logo\" onClick={props.reloadPage}>Clicky Memory Game</h4>\r\n    <h4 className={`message ${props.message.color}`}>{props.message.text}</h4>\r\n    <div className=\"score\">Current Score: {props.score.current} | Top Score: {props.score.top}</div>\r\n  </nav>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Introduction.css\";\r\n//import Img from './Images/background.jpg';\r\n\r\nconst Introduction = () => (\r\n  <div className=\"intro-container d-flex align-items-center\" style={{ backgroundImage : `url(./Images/background.jpg)` }}>\r\n    <div className=\"intro-text text-center\">\r\n        <h2 className=\"intro-title\">Clicky Game!</h2>\r\n        <h3 className=\"intro-message\">Click on an image to earn points, but don't click on any more than once!</h3>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Introduction;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nexport const Card = props => (\r\n  <div className=\"cards border\">\r\n    <img\r\n      className=\"img-fluid thumbnail\"\r\n      alt={props.src}\r\n      src={props.src}\r\n      onClick={props.handleOnClick}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport { Col, Row, Container } from \"./Grid\";\r\nimport Header from './Header';\r\nimport Introduction from './Introduction';\r\nimport Card from './Card';\r\n\r\n\r\nclass GameContainer extends Component {\r\n  state = {\r\n    score: {\r\n      current: 0,\r\n      top: 0\r\n    },\r\n    imgs: [],\r\n    message: {\r\n      text: \"Click an image to begin!\",\r\n      color: \"normal\"\r\n    }\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.setupCards();\r\n  }\r\n\r\n  handleOnClick = (src) =>{\r\n    //console.log(src);\r\n    let imgs = this.state.imgs;\r\n    const index = imgs.findIndex(function(element) {\r\n      return element.src === src;\r\n    });\r\n\r\n    if(imgs[index].isClick === true){\r\n      this.resetGame();\r\n    }\r\n    else{\r\n      let score = this.state.score;\r\n      score.current += 1;\r\n      imgs[index].isClick = true;\r\n      this.setState({\r\n        imgs : imgs,\r\n        score : score,\r\n        message: {text: \"Correct\", color: \"green\"}\r\n      });\r\n      this.shuffleCards();\r\n    }\r\n  }\r\n\r\n  resetGame = () =>{\r\n    let score = this.state.score;\r\n    if(score.top < score.current){\r\n      score.top = score.current;\r\n    }\r\n    score.current = 0;\r\n    this.setState({\r\n      score : score,\r\n      message : {text: \"Wrong!\", color: \"red\"}\r\n    });\r\n    this.setupCards();\r\n  }\r\n\r\n  setupCards = () =>{\r\n    \r\n    let imgSrc = [\r\n      \"./Images/1.png\",\r\n      \"./Images/2.png\",\r\n      \"./Images/3.png\",\r\n      \"./Images/4.png\",\r\n      \"./Images/5.png\",\r\n      \"./Images/6.png\",\r\n      \"./Images/7.png\",\r\n      \"./Images/8.png\",\r\n      \"./Images/9.png\",\r\n      \"./Images/10.png\"\r\n    ];\r\n\r\n    imgSrc = this.randomizeArray(imgSrc);\r\n\r\n    let objArr = []\r\n    imgSrc.map(element => {\r\n      return (objArr.push({\r\n        isClick: false,\r\n        src: element\r\n      }));\r\n    });\r\n\r\n    //console.log(objArr);\r\n    this.setState({\r\n      imgs : objArr\r\n    });\r\n  }\r\n\r\n  shuffleCards = () =>{\r\n    let imgs = this.state.imgs\r\n    imgs = this.randomizeArray(imgs);\r\n    //console.log(imgs);\r\n    this.setState({\r\n      imgs : imgs\r\n    });\r\n  }\r\n  randomizeArray = (array) =>{\r\n    //let imgs = this.state.imgs;\r\n    //console.log(this.state.imgs);\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    //console.log(imgs);\r\n\r\n    return array;\r\n  }\r\n\r\n  reloadPage = () =>{\r\n    window.location.reload();\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <Container fluid>\r\n        <Header\r\n          score={this.state.score}\r\n          message={this.state.message}\r\n          reloadPage={() => this.reloadPage()}\r\n        />\r\n        <Introduction/>\r\n        <Row>\r\n          <Col size=\"md-12\">\r\n            {this.state.imgs.map(element => {\r\n              return(\r\n                <Card\r\n                  key={element.src}\r\n                  src={element.src}\r\n                  handleOnClick={() => this.handleOnClick(element.src)}\r\n                />\r\n              );\r\n            })}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      )\r\n    }\r\n}\r\n\r\nexport default GameContainer;\r\n","import React from 'react';\nimport './App.css';\nimport GameContainer from \"./components/GameContainer\";\n\nconst App = () => <GameContainer/>;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}